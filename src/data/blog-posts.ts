
export interface BlogPost {
  slug: string;
  title: string;
  excerpt: string;
  date: string;
  image?: string;
  content: string;
}

export const blogPosts: BlogPost[] = [
  {
    slug: "observabilidade-apm",
    title: "Observabilidade == APM?",
    excerpt: "Entenda as Diferen√ßas e Evite Armadilhas Comuns.",
    date: "29 de Janeiro de 2024",
    image: "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2080&q=80",
    content: `
Recentemente, um termo novo come√ßou a circular no mundo da tecnologia: observabilidade. Como acontece com muitos conceitos emergentes, este se baseia em conhecimentos acumulados ao longo das d√©cadas. No entanto, n√£o √© raro que novos conceitos sejam confundidos com os antigos, por vezes sendo vistos apenas como uma estrat√©gia de marketing. Neste contexto, algumas empresas come√ßaram a substituir termos em seus materiais de marketing, adaptando-se a essa nova tend√™ncia sem realmente alterar seus produtos.

√â essencial entender, contudo, que observabilidade difere significativamente do conceito de "monitoramento", conforme j√° discuti em algumas *lives* e artigos anteriores no blog:

***üí° Monitoramento √© querer saber as respostas para perguntas espec√≠ficas, observabilidade √© querer saber as respostas para perguntas que ainda n√£o foram feitas.***

Em suma, enquanto o monitoramento se preocupa em verificar o estado atual de elementos como mem√≥ria ou filas em uma aplica√ß√£o espec√≠fica, a observabilidade permite teorizar sobre o comportamento da aplica√ß√£o e usar dados de telemetria para validar ou refutar essas teorias. Quest√µes como: "Ser√° que a lentid√£o est√° afetando somente usu√°rios em S√£o Paulo ou √© um problema geral? Ser√° que impacta apenas clientes VIP ou est√° relacionado a um m√©todo de pagamento espec√≠fico?" s√£o exemplos do escopo da observabilidade.

## **O Papel do APM Nessa Discuss√£o**

Recentemente, deparei-me com um post em uma rede social que me fez lembrar do equ√≠voco comum de considerar observabilidade e APM (Application Performance Management) como sin√¥nimos:

![‚ÄúEu tenho trabalhado com observabilidade (anteriormente conhecida como APM) por alguns anos...‚Äù](https://cdn.hashnode.com/res/hashnode/image/upload/v1705479426107/f8759745-f04b-4636-b30b-0901d131535c.png align="center")

A postagem dizia: *‚ÄúEu tenho trabalhado com observabilidade (anteriormente conhecida como APM) por alguns anos...‚Äù*

Para deixar claro: eu n√£o conhe√ßo essa pessoa e n√£o conhe√ßo a solu√ß√£o que ela vende, e respeito muito todas as pessoas que trabalham nessa empresa e s√£o atuantes no projeto OpenTelemetry.

No entanto, tenho que discordar:

***üí° Observabilidade n√£o √© o que antes era conhecido como APM***

A observabilidade mant√©m-se como a capacidade de explorar dados de telemetria, formulando e respondendo perguntas. J√° o APM, por outro lado, oferece visualiza√ß√µes e insights espec√≠ficos para quest√µes comuns, como identificar os endpoints mais lentos ou as queries SQL que mais impactam o desempenho.

O APM √© extremamente √∫til, mas equiparar observabilidade a APM √© um equ√≠voco que pode ser prejudicial tanto para quem extrai valor do APM quanto para quem busca compreender a observabilidade em sua plenitude.
    `
  },
  {
    slug: "seu-maior-custo-de-telemetria-e-com-logs-mas-nao-precisa-ser-assim",
    title: "Seu maior custo de telemetria √© com logs. Mas n√£o precisa ser assim.",
    excerpt: "Logs consomem boa parte do nosso or√ßamento de observabilidade, trazendo um custo/benef√≠cio question√°vel. Como podemos mudar isso?",
    date: "22 de Janeiro de 2024",
    image: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80",
    content: `
Um dos maiores desafios e custos associados √† observabilidade de um sistema √© a necessidade de transmitir e armazenar registros detalhados de eventos (logs). Apesar dos custos, esses registros s√£o essenciais para o monitoramento e solu√ß√£o de problemas. Geralmente, cada registro √© armazenado localmente em um arquivo de texto simples e enviado para um local central para armazenamento e pesquisa.

Neste sistema de armazenamento de logs, eles geralmente passam por compress√£o para reduzir os custos de armazenament, e indexa√ß√£o para facilitar a busca e recupera√ß√£o posterior. Mesmo depois de tudo isso, muitos desses registros podem nunca mais serem vistos ou consultados novamente. Com tudo isso em mente, n√£o preciso ser um m√°gico ou vidente para adivinhar que o maior custo que voc√™ tem em sua solu√ß√£o de observabilidade est√° relacionado aos logs.

***üí° E se eu te dissesse que voc√™ pode reduzir boa parte de seus custos de observabilidade utilizando uma estrat√©gia muito simples?***

Ao analisarmos nossos registros de logs, fica claro que o papel mais importante da maioria deles √© informar quando um determinado evento ocorreu. Uma vez armazenados, agregamos essas informa√ß√µes em tempo de consulta para saber quantas vezes o evento aconteceu em um determinado per√≠odo de tempo. E √© exatamente para isso que temos outro sinal: m√©tricas. Elas s√£o armazenadas geralmente em um banco de dados temporal, onde o nome do evento √© armazenado apenas uma vez, e os diferentes valores em cada intervalo de tempo s√£o armazenados com um alto grau de compress√£o. O resultado √© que cada ocorr√™ncia de um evento ocupa, estatisticamente, menos de 1.5 bytes, enquanto o registro do evento de log armazenar√° tanto a representa√ß√£o em texto puro quanto os √≠ndices utilizados para busca, resultando em um custo de armazenamento muito superior.

***üí°Cada ocorr√™ncia de um evento ocupa, estatisticamente, menos de 1.5 bytes como m√©trica. Ao calcular o custo de uma solu√ß√£o de logs, usa-se 200 bytes para cada ocorr√™ncia como ponto de partida.***

N√£o estou dizendo que TODOS os eventos devem ser migrados de logs para m√©tricas, mas muitos dos eventos que armazenamos hoje podem sim ser convertidos.

## Como fazer a convers√£o

A melhor forma de se fazer a convers√£o √© ao alterar a instrumenta√ß√£o no seu pr√≥prio c√≥digo. Por exemplo, onde antes v√≠amos algo assim‚Ä¶

\`\`\`go
log.Info("chamada http recebida para / , status √© 200")
\`\`\`

‚Ä¶ agora temos algo assim ao usar a API de m√©tricas do OpenTelemetry:

\`\`\`go
// em um c√≥digo de inicializa√ß√£o:
contadorHTTP, err := meter.Int64Counter(
		"http.calls",
		metric.WithDescription("Quantidade de vezes que recebemos uma chamada HTTP."),
	)

// no nosso handler HTTP, adicionamos 1 ao contador
contadorHTTP.Add(r.Context(), 1, metric.WithAttributes(semconv.HTTPStatusCode(200))))
\`\`\`

A segunda forma de se fazer isso √© utilizar o OpenTelemetry Collector para converter de um sinal para o outro. Por exemplo, pode-se utilizar o \`count connector\` juntamente com um filtro, para que apenas eventos pr√©-selecionados sejam convertidos em m√©tricas. Todos os outros eventos continuam como logs:

\`\`\`yaml
receivers:
  otlp:
    protocols:
      grpc:

processors:
  filter/remove-common-events:
    logs:
      log_record:
        - 'IsMatch(body, ".*http call made to route.*")'

  filter/retain-common-events:
    logs:
      log_record:
        - 'not IsMatch(body, ".*http call made to route.*")'

exporters:
  logging/metrics:
    verbosity: detailed
  logging/logs:

connectors:
  count:
  forward:

service:
  pipelines:
    # a pipeline principal, direcionando os dados para as outras pipelines de logs
    logs:
      receivers:
        - otlp
      exporters:
        - forward
    
    # filtra os eventos comuns, mantendo o restante
    logs/everything-else:
      receivers:
        - forward
      processors:
        - filter/remove-common-events
      exporters:
        - logging/logs
    
    # mantem apenas os eventos comuns
    logs/common-events:
      receivers:
        - forward
      processors:
        - filter/retain-common-events
      exporters:
        - count
    
    # converte logs em metricas
    metrics/count-common-events:
      receivers:
        - count
      exporters:
        - logging/metrics
\`\`\`

Com isso, se detectarmos que o evento com o texto ‚Äúhttp call made to route‚Äù √© muito comum em nosso ambiente, podemos convert√™-lo em m√©tricas diretamente no Collector. Para testar, podemos utilizar o \`telemetrygen\` para gerar dois tipos de registros de logs, um que vai ser convertido pra m√©tricas, e outro que n√£o:

\`\`\`bash
telemetrygen logs --otlp-insecure --logs 10 --body "http call made to route '/', status=200"
telemetrygen logs --otlp-insecure --logs 10 --body "some other message"
\`\`\`

Entre um comando e outro, veja as m√©tricas internas do nosso Collector, pra ter certeza de que logs foram convertidos para m√©tricas e de logs que continuaram sendo logs. D√™ uma olhada nas m√©tricas \`otelcol_exporter_sent_metric_points\` , \`otelcol_exporter_sent_log_records\` e \`otelcol_receiver_accepted_log_records\`:

* ao rodar o primeiro comando, o Collector deve ter aceito 10 registros de log, exportado 10 pontos de dados de m√©tricas, e nenhum log
    
* ao rodar o segundo comando, o Collector deve ter aceito 20 registros de log, exportado 10 pontos de dados de m√©tricas, e 10 registros de log
    

## Conclus√£o

Muito provavelmente voc√™ tem um sistema que emite logs, mas n√£o emite m√©tricas. Por este motivo, voc√™ acaba usando ferramentas de log quando seu interesse est√° na verdade em m√©tricas. Por√©m, os custos acabam sendo muito mais altos do que se o sinal adequado fosse utilizado. A convers√£o de logs em m√©tricas n√£o s√≥ otimiza os custos de armazenamento e transmiss√£o, mas tamb√©m pode melhorar a efici√™ncia na an√°lise de dados e na detec√ß√£o de problemas.
`
  },
  {
    slug: "telemetria-monitoramento-e-observabilidade",
    title: "Telemetria, Monitoramento e Observabilidade",
    excerpt: "Vamos falar sobre estes tr√™s termos que sempre andam juntos?",
    date: "04 de Janeiro de 2024",
    image: "https://images.unsplash.com/photo-1518186285589-2f7649de83e0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1674&q=80",
    content: `
A telemetria, frequentemente esquecida nas discuss√µes sobre tecnologia, √© um elemento crucial no entendimento e aprimoramento do desempenho das aplica√ß√µes. Ela refere-se aos dados gerados por uma aplica√ß√£o que n√£o s√£o diretamente ligados ao seu aspecto comercial, mas que s√£o essenciais para entender o comportamento do software.

Uma excelente maneira de compreender o que √© telemetria √© atrav√©s da analogia com a condu√ß√£o de um carro. Quando dirigimos, uma s√©rie de dados como velocidade, acelera√ß√£o, e desacelera√ß√£o s√£o constantemente registrados. Esses dados, semelhantes aos gerados por uma aplica√ß√£o, fornecem insights sobre o desempenho, como a velocidade de processamento ou o n√∫mero de requisi√ß√µes recebidas por minuto.

## Os **Tipos Principais de Dados de Telemetria**

**Logs**: Esses s√£o registros de eventos espec√≠ficos que ocorrem durante a opera√ß√£o da aplica√ß√£o. Eles s√£o cruciais para o processo de depura√ß√£o e fornecem um relato detalhado do que aconteceu e quando.

**M√©tricas**: Representam um resumo agregado de como a aplica√ß√£o est√° funcionando. Por exemplo, elas podem quantificar o n√∫mero atual de visitantes de um site. M√©tricas podem ser representadas de v√°rias formas, incluindo contadores que s√≥ aumentam ou valores que variam.

**Rastros**: Estes s√£o conjuntos de informa√ß√µes que ajudam a entender o percurso de uma requisi√ß√£o espec√≠fica atrav√©s de v√°rios processos ou microservi√ßos. Eles s√£o fundamentais para compreender como as diferentes partes de uma aplica√ß√£o interagem.

### Outros Sinais

Existem tamb√©m outros tipos de dados de telemetria que s√£o importantes para entender o desempenho e o comportamento de uma aplica√ß√£o, entre eles:

**Eventos**: S√£o registros de ocorr√™ncias significativas que ocorrem durante a execu√ß√£o da aplica√ß√£o. Eles podem ser utilizados para identificar eventos espec√≠ficos e analisar seu impacto no sistema.

**Perfis**: Permitem o monitoramento e a an√°lise do desempenho de uma aplica√ß√£o ao longo do tempo. Eles fornecem informa√ß√µes detalhadas sobre a utiliza√ß√£o de mem√≥ria, tempo de execu√ß√£o de fun√ß√µes e outros aspectos relacionados ao desempenho.

**Erros (Stack Traces)**: S√£o registros que capturam informa√ß√µes sobre exce√ß√µes e erros que ocorrem durante a execu√ß√£o da aplica√ß√£o. Esses registros s√£o essenciais para identificar e corrigir problemas no sistema.

Esses tipos adicionais de dados de telemetria complementam os logs, m√©tricas e rastros mencionados anteriormente, fornecendo uma vis√£o mais completa e detalhada do desempenho e do estado da aplica√ß√£o.

## **Monitoramento vs. Observabilidade**

### Monitoramento

O monitoramento diz respeito a ter respostas para perguntas conhecidas sobre uma aplica√ß√£o. Por exemplo, receber um alerta quando a CPU de um servidor atinge 90% de sua capacidade. √â uma forma proativa de estar ciente do estado atual do sistema.

### Observabilidade

Por outro lado, a observabilidade se refere √† capacidade de entender o que est√° acontecendo em um sistema com base nos dados coletados, incluindo a telemetria. Ela √© crucial para diagnosticar problemas n√£o previstos durante o desenvolvimento.

## **Conclus√£o**

Em resumo, a telemetria √© a mat√©ria-prima para o monitoramento e a observabilidade em tecnologia da informa√ß√£o. Ela fornece os dados necess√°rios para compreender profundamente o funcionamento de uma aplica√ß√£o, permitindo a otimiza√ß√£o e a manuten√ß√£o eficiente do sistema.

## V√≠deo original

Falei sobre este t√≥pico em um v√≠deo dispon√≠vel no canal do [Dose de Telemetria](https://www.youtube.com/@DoseDeTelemetria) no YouTube. Voc√™ pode assistir ao v√≠deo [aqui](https://youtu.be/x-FKKFCMbjc).

%[https://www.youtube.com/watch?v=x-FKKFCMbjc]
    `
  }
];
